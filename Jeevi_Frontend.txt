Service based companies

	LIke TCS, CTS, Wipro, Accenture

Product based companies

	Google, Zoho, Amazon
	
	
In IT we have two face

	Front End
	
		Languages
			HTML, CSS and Javascript
			
				Syntax and Rules 
		
		Frameworks
		
			jQuery, AngularJS, Angular, ReactJs, VueJS			
				
	
	
	Back End
	
		Languages
			java, .net, python and Node
		
		Framework
			
			Spring, WebAPI,dJango
		
		
	DB
	
		SQL Server, MySql, postgres, MongoDB
		
	Front End 


		HTML  -> Presentation
		
		CSS  -> Presentation
		
		Javascript -> Interaction
		
		
	Browser
	
		Chrome
			102 => JS latest update			
		
		Opera
		
		Edge
		
			36 => JS latest update not there
		
		Safari
		
		
	Every browser has a Browser Engine
	
	
		Browser Engine
		
			Presentation Engine
			
				HTML and CSS
			
			JS Engine
	
		
		
	
	HTML
	
		Hypertext markup language
		
		
		HTML 5
		
		HTML is not a programming Language
		
		Tag or syntax based language
		
		
		A file with Extenstion .html => will be a page
		
		
		Page should have a core HTML Struture
		
		What is a Tag?
		
			<tag> <!-- Content --> </tag>
			
			A tag will have start and end tags
			
			Some tag has exceptions, it will have self closing
			
				<tag /> 
				
			A start tag can have attributes
			
				<tag id="thisIsMYFirstTage" name="" class style value   > </tag>
			
			
			Tag
			
				Presentation Tag
				
				Interaction Tag
				
			Example
			
				<p id="myPTag" > This is my content </p>
				
				<p id="myPTag" > This is my content </p>
				
				<p id="myPTag" name="" > This is my content </p>
				
				<p id="myPTag" > This is my content </p>
				
				
		Core
			
			<html>	
			
				<head>
					<title> Tab Name </title>
				</head>
				
				
				<body>
				
				</body>
			
			</html>
			
		
		
	
	Default tags
	
		Headings
		
			<h1> content </h1>
			<h2> </h2>
			<h3> </h3>
			
			
			
			<h6> </h6>
			
			
		Paragraph
		
			<p> </p>
			
		Image
		
			<img src="path" />
			
			Path -> can be a local path
				or it can be from a network (http or https)
		
		
		List tag
		
			Ordered List
			
				<ol>					
					<li> Music </li>
					<li> Badminton </li>
				</ol>
				
			Unordered List
			
				<ul>				
					<li> Music </li>
					<li> Badminton </li>				
				</ul>
			
			
		Table
		
		
			<table>
				<thead>
					<tr>
						<th> Year </th>
						<th> Degree </th>
						<th> Percentage </th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td> sdfsdf </td>
						<td> sdfsdf </td>
						<td> sdfsdf </td>
					</tr>				
				</tbody>			
			</table>
			
	Inline Tags
	
	
		<strong> </strong>
		
		<em> </em>
		
		
		
		
	Interaction Tags or Form tags
	
		Input
		
		<input />
		
		
		<input type="text"/> =>  We can enter any type of input Text + number 
		
		
		<input type="number" /> => User can enter only numbers
		
	Link
	
		Anchor tag
			
			<a href="path to a file or path to a website" />
			
			<a href="about.html" />
			
			<a href="https://www.google.com" />
			
			
			<a href="https://www.google.com" target="_blank" /> => Blank will open in a new Tab
		
			
	Additional tags
	
		<hr />
		
			 it will create a horizontal line
		
		<br />
		
			It will give a break to the current line
		
		
	There are types of elements


		1. Block elements
		
		2. Inline Elements
		
		3. Inline-Block Elements
		
	
	Block Elements
		
		1. default styling		
			display: block;
			
		2. it will take entire width
			(irrespective of content)
			
		3. It will always start in a new line
		
		4. with custom styling we can change the height and width of an element
		
			Ex: P, Heading tag
		
	Inline Elements
	
		1. No default styling about display
		
		2. It will take only content width
		
		3. Starting position based on previous elements		
		
		4. with custom styling we cannot change the height and width of an element 
		
		Ex: Anchor tag, Table
		
		
	Inline-Block Elements
	
		1. all properties of inline elements
		
		2. height and widht can be customized		
		
		 Ex: Image
		 

	<span>
		<div>
		
		</div>
	
	</span>
		 
		 

	Grouping tags 
	
		division
		
			<div> </div> => smaller groups => block
			
		Sections
		
			<section> </section> => Large Number of group => Block
			
		Span
		
			To wrap or group inline elements
		
		<div id="nav">
		
		<div>
		
		<navbar>
			<div>
			</div>
		
		</navbar>
		
		<header>
		
		</header>
		
		<main>
		
		</main>
		
		div id="header"
		

	CSS
	
		Cascading Styling Sheet
		
		Its not a programming language
		
		Syntax based 
		
		CSS used to style our web pages and layout design
		
		CSS Basic Syntax :
		
			selector {
				style-name1 : style-value1;
				style-name2 : style-value2;
			}
		
		
		How to bring our custom CSS to out HTML page:
		
			
			1. Inline Styling
			
				<p style="styleName: styleValue; style2: value2;" > </p> => specific to that element
			
			2. Internal Styling
			
				<html>
					<head>
						<style>
							selector {
								style-name1 : style-value1;
								style-name2 : style-value2;
							}						
						</style>
					</head>
					<body>
						
					</body>
				</html>
			
			3. External Styling
			
				we have to create a file
				
					a file with extension .css
					
						my-style.css
						
						<head>
							
							<link rel="stylesheet" href="./filepath" />
						</head>
			
			
			
			
			How to select an element
			
				 Selector
				 
					1. Inline Style =
					
					2. Element Selector
					
						p, h2, div {
							style: value;
						}
						
					3. attribute selector
					
					<p id="myPTag" name="nameOfP"> Content </p>
					
					
					p[id="myPTag"] {
						style: value;
					}
					
					#myPTag {
						style: value;
					}
					
					p[name="nameOfP"] {
						style: value;
					}
				
				
					input[type="number] {
						style : value;
					}
					
			4. Class selector
			
				{
					color: red;
					style1: value1;
					style2: value2;
				} => these styles may be used in many places
				
				.name {
					color: red;
					style1: value1;
					style2: value2;
				}
				
				.name1 {
					color: blue;
					style1: value1;
					style2: value2;
				}
				 now name is the css class
				 
				 <p class="name name1 name2 name3"> Content </p>
				
				
			     <p> content </p>
				 
				 p {
					color: red !important; // this will force browser to avoid overriddens
				 
				 }
				
			5. Pseudo selector
			
	CSS Units
	
	 absolute units
		pixel (px) => single pixel from the screen resolution
		
		percentage (%) => 
	
	relative units
		rem
		
		em
			
			
	Specificity:
	
		How easily browser will identify an element to apply our custom CSS
	
		0 100
		Specificity		  Score
		Inline Element 	 - > 0
		#myTag		     =>  100
		Class selector	 -> 10	 
		element Selector -> 1
			
	Styles: 
	
		All CSS will work based on joining all style
	
		Text color;
		
			color: value;
			
				For Color value can be any one of the following
				
				
					Named color
						red, green, blue, yellow,
						colour shade will be based on browser's configuration
						
						
					We have to generate color
					
						Primary colours
						
							Red, Green and Blue
							
							Painting rules
							
								Colour Codes
								
									RGB
										Consider we have a bucket of each colour
											
											Starting 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, a, b, c, d, e, f
											
									RGB =>	000 => black
									
										 => 0af => this can be a colour
										 
										=> f00 => Red
										=> 0f0 => Green
										
										=> 00f => blue
									
									RGB => fff => white
									
									RGB => 000000
									
									R => ff0000;
									
									color: #aaffaa;
									
						(0,255)
							color: rgb(100,235,100);
							
							color: rgba(100,235,100,0.5);
		
	
	font-size
	
		will decide ur content text size
		
			font-size: 20px;
			
			font-family: 'name of the font' ;
			
				Font names will be available in browser
				
				If we custom fonts we need to import it from outside
				
					Ex: fonts.google.com
					
	font-weight
	
		thickness of ur text
		
		font-weight: bold;(800)
		
			font-weight can be given in number count
			
				100 ..... 900;
	text-decoration
	
			for underline
					
			text-decoration: underline;
			
	font-style:
	
		font-style: italic;
		
	Text alignment
	
		text-align: left | right | center | justify;

	Back ground color
	
		background-color: #fdd8d8; ( any color value)
		
	Backgroud: 
				
				
	Line Height
	
		line-height: 1;
		
		line-height: 2;
		
	Distance in word characters
	
		letter-spacing: 1;
		
	List item styling
	
	Ordered List
	
		list-style:  (auto | decimal) | lower-romen | lower-alpha | upper-romen | upper-alpha;
		
	Unordered List
	
		list-style: (auto | disc) | dotted | circle | square;
		
		
	Controlling height and width of an element
	
		height: 100px | 40% | 20vh | 2rem | 3em;
		
		width:  100px | 40% | 20vw | 2rem | 3em;
		
			vh => viewport-height;
			vw -> viewport-width;
			
		min-width: 50px; it will render with 50px and responds with content width
		
		min-height: 50px;
		
		max-width: 100px; the element only responds till max width
		max-height: 100px;
			
	text-transform
	
	
		<p> About Me </p>
		
		p {
			text-transform: lowercase | uppercase | capitalize ;
		}
		
		

	Element Box:
	
		Having
		
		
			Content
			
				will be in blue color
			
			Border
			
			
		Padding
		
			Distance between content border
			
			padding: 10px; which means padding top 10, paading bottom 10, paading left 10, padding right 10;
			
			padding-right: 10px;
			
			padding-left: 10px;
			
			padding: top right bottom left;
			
			padding: 10px 15px 20px 10px;
			
			padding: 10px 15px;
					
					top+ bottom right+ left;
			
			In browser u can see this as light green color
		
		
		Margin
		
			Distance between Your element border to neighbours
			
			margin: 10px; all side
			
			margin: 10px 15px; top+bottom right + left;
			
			margin will be visible as orange color in the browser
		
		
	If u want to create a distance between two elements
	
		margin: 
		
	
	if we want distance within content and border
	
	 padding
	 
	Always border is invisible
	
		border: Size of the border   type of the border  color of the border;
		
		border: 1px solid red; all side will create border
		
		border-top: 1px solid red;
		
		
		border-radius: 10px;
		
		
		
	Box-shadow
	
		box-shadow: horizontal vertical blur spread shadow-color;
		
		box-shadow: -10px 15px 10px 5px #red;
		
		
	
	position:
	
		This property will control element rendering position
		
		
		position: static | fixed | absolute | relative; // | initial (Browser default) | inherit (Immediate Parent)
		
		position: static;
		
			it will follow defualt browser rendering
			
		position: fixed;

			it will detatch from browser DOM tree it will be attached to View Port;
			
		There are some position CSS styles
		
			top, bottom, right and left;			
			
			p {
				position: fixed;				
			}
			
			
		position: relative;
		
			it will detatach from Tree but it wont attach to view port
			
			
			Instead it will be positioned from its own place;
			
			top right left bottom
			
			
		position: absolute;
		
			It should be used within a relative positioned parent. Otherwise by defualt body tag is a relative positioned element
			
			div style="position:relative;"			
			
				p style="position: absolute"
				
			
	Display: 


		display: block | inline | inline-block;
		
		button {
			display: block;
		}
		
		display: none; // It will remove the element from DOM Tree
			
		
			visibility: hidden | visible;
			
			
		Layout:
		
			display: table;
				display: table-row;
				display: table-cell;
			
			<table>
			
				<tr>
				
					<td>
					
			div display: table; 
			
				div display: table-row;
				
					div display: table-cell;
					
					div display: table-cell;
					
					div display: table-cell;
					
					
		display: flex;
		
			div 
				display: flex;
				
				flex-direction: row | column | row-reverse | column-reverse; 
				// Direction of child elements arrangement
				
				
				justify-content: 
				
					Deals with main-axis
					
					flex-direction:row | row-reverse
					
						main axis is X
						
						justify-content: flext-start( Defualt)
								flex-end  | center | space-between | space-around | space-evenly
					
					
					
				align-items:
				
					Deals with Cross axis 
					
					flex-direction: row | row-reverse
					
						cross axis is Y
						
						align-items: flex-start | flex-end | center
			
				div
				div
				div
				
			flex-wrap: nowrap; // parent wont give space-around
			flex-wrap : wrap; // it will additional
		
		Advanced version of Flex
		
		display: grid;
		
	
	
		overflow
		
			overflow: x-axisvalue y-axisvalue;
			
			overflow-x: value
			overflow-y: value;
			
				auto | scroll | hidden;
	

		transform:
		
			it will change the size or eleme
			
			transform: rotate(100deg)
			
			transform: scale(value);
			
			 default scales value 1;
			 
			 transform: scale(1.5);
			 
			transform: translate(X, Y);
			
				transform: translate(10px, 50%);
				
				by default transform orgin starting point of element
				
				transform-orgin: center;
			
		
	
	Pseudo Selectors
	
		a, button, div
		
		a -> 
		
		a:visited {
			color: #red;
		}
		
		a:hover {
			color: blue;
		}
		
		#myDiv:hover {
		
		}
		
			
		cursor: pointer | not-allowed;	

		Hierarchy Wise 
		
			div class="card"
			
				p
			
				div
					div
				
					img 					
					
					p
					
					h1
				div
					
					p
					
					h2
				h2
			


		.card {
		
		}
		
		
		immediate child
		
			.card > div {
			
			}
		
		
			.card > div:first-child {
			
			}
				
			.card > div:last-child {
			
			}
			
			
			.card > div:nth-child(3) {
				
			}
			
			.card > tr:nth-child(odd) {
				
			}
			
			.card > tr:nth-child(even) {
				
			}
			
			.card > div:first-child > img {
			
			}			
			
			
			
		Combination
		
			div class="class1 class2 class3"
			
			p class="class1"
			
		
		.class1 {
		
		}
		
		.class1 .class2 {
		}
		
		div.class1.class2 {
		
		}
		
		p.class1 {
		
		}
		
		
		
	Sibilings
	
		div 
		
			div class="cla"
			p
			div
			div
			h1
		
		.cla > * {

		}
		
		
	universal selector
	
	* {
		margin: 0;
		padding: 0;
	}
			
			
	::before, ::after
	
	
	transition
	
		transition: transition-property transition-delay transition-mode;
		
		
		transition: width .2s ease-in;
			


	Animation:
	
		keyframes
		
			0 to 100% => we have to write styles
			


	global-styles
	
	
		global-styles.css
		
			* {
				margin: 0;
				padding: 0;				
			}
			
			.p-0 {
				padding: 0px;
			}

			
			.m-15 {
				margin: 15px;
			}


			.mt-20 {
				margin-top: 20px;
			}
			
			
		login.css
		
			login-btn {
			}


	third-party libraries
	
		1. Bootstrap
			utilities
			
			.m-2 => full side margin of 2 units
			.mt-2 => margin top of 2 units
			.ms-2 => left side 2 units
			.mx-2 => left and right 2 units
			.my-2 => top and bottom 2units
			same for padding
			.p-2 
			
			buttons
			
				btn- primary, success, info, warning, light, dark, danger
				
			text
				text-primary
				
			forms
			
				form-control
				
			Layout
			
				col
				
					col-1 t0 col-12
					
					always total should be within 12 or 12.\
					
				container, container-fluid
				
				
				
		
		2. Angular material (Google)
	



	Media Queries
	
		styles based on screen width
		
		@media screen(max-width: 1024px) {
		
			.login-container {
				background-color: red;
			}
		}

		@media screen and (max-width: 1440px) {
		
			.login-container {
				background-color: blue;
			}
		}


	in bootstrap they divided the screen in to various sizes
	
		xs sm md lg xl 
		
		flex
			.d-flex
			.d-sm-flex
		col
			col-6
			
			col-sm-6 ( from small screen break point it will be 6 colum) 576px
			
			col-md-5


	.card {
		display: block;
	}


	.card > .card-header {
		display: none;
	}
	
	.card > .card-header > p {
		font-size: 14px;
	}

	.card > .card-header  h1{
		display: none;
		
		
	SCSS and SASS

	my-styles.scss or my-styles.sass
	
	I have to use a converter to convert scss to css and then add it to my head in html
	
	scss
	varibles
	$black: #000;
	.card {	
		display: block;
		.card-header {
			display: none;
			h1 {
				font-weight: bold;
			}
			
			p {
				font-size: 14px;
				color: $black;
			}
		}
	}
	
	sass is made up of code language called 'Ruby'
	
	.card
		display: block
		.card-header 
			display: none
			p 
				font-size: 14px
	
	
	
	Gulp.js -> library => task runner
	
		scss to css
		
		sass to css
		
	Bower
	


	they can also do minification
		they can do for Css and JS
		
			filename.min.css or filename.min.js
	
		reducing file size by removing comments, spaces
		
		.card > .card-header
		
		.aa> .abc
	
	
	Framework
	
		top to bottom configuration always there
	CSS units 
		
	
		rem and em
		
		Html 
		
			font-size: 14px;
			
		base of rem:
		
			font-size: 1rem; 1.5rem: 21px;
			
		EM:
		
			div font-size: 16px;
				p 
					font-size: 1em;
					
					
	
	
	Javascript:
	
		Language of browser
		
		Europieon Computer Manufacturers Association (ECMA)
		
		ES6

	
	How to brring JS in our Page
	
		1. Internal
			<head>
				<script>
				
					console.log("Test");
				
				</script>
			
			</head>
			or
			before end of body tag
		
		2. External File
			local
			create a file with extension .js
			<script type="text/javascript" src="./my-js.js"> </script>
			
			cloud
			
				src will be https or http
				
				
	
	
	Data
	
		number => 1, 1.01, -1, 1.989998
		
		string => "Text1u9u98218hdihua___1@@", 'Text1u9u98218hdihua___1@@', `Text1u9u98218hdihua___1@@` (Backtick)
		
		boolean => true or false
		
		Date
		
		null 
		
		undefined
		
		NaN => not a number
		
		Object => { key: value, key1: value1 } => JavaScript Object Notation ( JSON )
		
		Array [1,2,3]
		
		User defined Objects
		
	Use 'typeof' to find the type the varaible
	
	
	loosly typed programming language or typeless programming language
	
	var name 
	
		
		
	Variables
	
		"my Name is magesh"
		
		2 part

			declare a variable
			
				keywords to create or declare variale
				
					var, let and const
					
					var name;
			
			variable defenition
			
				name = "my Name is magesh";
		
			var name = "jeevi";
			name = "arasu";
			name = "jackie";
			
			let name = "jeevi"
			name = "arasu";
			name = "jackie";
			
			
			
			const name = "jeevi";
			name = "arasu"; // name declared as const, cannot be changed
		
		{
			var name = 'mahi';
		
			sasoa
			
			askmlas
			
			
			askdmlas
		
			loop {
				let name = "mahesh"
			}
			
			
			if			
			
		
		}
	
	
	var num1 = //get it from user;
	
	var num2 = 12;
	
	console.log(num1 + num2);
	num1 = null;
			
			
	rules for a variable name
	
		meaningful
		
		cannot be reserved word or a keywords
		
		should not contain any special characters (expect underscore)
		
		should not have space
		
		if u variable have mutliword
		
			we have to use camelCase
			
			var userName, user_name, username, USERNAME
			
		use upper case for const
		
			const PI = 3.14;
			
			
		
		var name = "Test";
		
		var num1 = 10;
		
		var isValid = true;
		
		var numArray = [10, 11, 12];
		
			index start from 0
			
				0 to lengnth of array -1
				
	    
		var name = "jeevi"
		
		var age = 10;
		
		var myUser = {
			"name" : "jeevi",
			"age" : 10
		}
		
		how to access the value from an object
		
			myUser.age => 10
			
			myUser["age"] => 10
		
	Type restrictions	
	
	
	private String name;
	this.name = "test";
	this.name = 10;
	
	private String[] hobbies;
	this.hobbies = new Array[]
			
		var num1 = getting value from user
		var num2 = getting value from user
		
		console.log(num1 + num2);
			type will be found out at run time
			
		var num1 = "test";
		
		num1 = 10.111;
		
		num1 = true;
		
		num1 = ["test"];		

		num1 = ["test", 10, true];
		
		num1[2] = "tes2";
		
	
	JS is single thread
	
	top to bottom
	
	
	callbacks
	
	Functions
	
		fuctions are for executing mini task
		
		Function declaration
			function expression
				function FunctionName() {
					const name = "magesh";
					
				}
		
		Function Call
		
			FunctionName();
		
		Function Arguments
		
		
			function fName(arg1, arg2, arg3) {
			
				console.log(arg1);
				
			
			}
			
			fName(1,2,3);
		
		function print() {
			console.log("Date printed");
		}
		
		
		print();
		
		Function assignment
		
			var add = function(num1, num2) {
				console.log(num1 + num2);
			}
		
		
		
	
		Student
		
			id, firstname, lastName, batch, // Properties
			
			Methods
			getFullName(){
				return firstName + "_" + lastName;
			}
			
		we have to decide the blueprint

	operators
	
		+ => for numbers it will add, and for string it will concat
		
				1 + 1 = 2
				
				"Str" + "_" + "str1" => Str_str1
		
		- => it will subscrct values
		
		* => multiplicaton
				num1 * num2
				
		/ => division
				num1 / num2;
				
		% => to find reminder
		
				4 % 2 = 0;
				
		= => assignment operator
		
		== => COmparion

	Employee 
	
		id, name, joiningYear
		
		
		
	conditons
	
	 if
	 
		truthy => true or a expression which resolves to true
		
			(comparison operators)
			
				1 == 1 => true
				
				2 > 1 => true
				if(1) => true
				
				if('nonEmpty', {}) => true
				
				


		falsy
		
			1 != 1 => false
			
			1 > 2 = false
			
			if(0) => false
			
			if('') => false
			
			if(null | undefined || NaN) => false
			
		! operator
		
			!truthy = false;
			!falsy = true;
						
			!(1 == 1)
		if(truthy) {

		} else {
			
		}
		
		if(truthy1) {
		
		} else if(truthy2) {
		
		} else {
		
		}
		
	
	Type comparison operator
	
		===



	Asyncronous Programming
	
		
	
	
	HTTP
	
		
		Backend developers will create an API application interface
		
		http:/some.com/api/v1/users => communication through http protocal
		
		{
		
		}
		
		[]
		
	HTTP Methods
		
		to fetch user details
		
		http:/some.com/api/v1/users => GET method => does not contain any object in request 
						=> they will return data
		
		http:/some.com/api/v1/users => POST method => for new user
		
				=> Should have a request body 
				=> receive and add to their database
				
		[
			{ id: 1 , name: jeevi },
			
			{ id: 2, name: jackie }
		]
		
		id 
		
		name 
		
		3, Magesh
		
		[ { id: 1 , name: jeevi },			
			{ id: 2, name: jackie } ,
			{ id: 3, name: magesh }
		]
				
	
			
		http:/some.com/api/v1/users => PUT method => Update
						=> aslo have body
		
		
		http:/some.com/api/v1/users => delete method
			no content from request
			removes a data
			
	JavaScript
	
		fetch() => window
		
		
		return a promise => Asyncronous
		
		
		fetch('url') => url with GET method
		
		fetch('url', data , { headers: { method : 'POST' } }) =>
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		



	